#! -*- coding:utf-8 -*-
u"""
    单元测试 unittest
学习 & 使用Api

"""
from __future__ import unicode_literals
import unittest
import sys
reload(sys)
sys.setdefaultencoding('utf-8')

from .base_tools import Dict

class TestCaseApi(unittest.TestCase):
    u"""
        测试用例
    """
    ################
    # 初始化 & 销毁
    ################
    def setUp(self):
        print(">>> setUp 每个测试用例运行之前运行\n")
    
    def tearDown(self):
        print(">>> tearDown 每个测试用例运行之后运行\n")
    
    @classmethod # 必须要 classmethod 装饰
    def setUpClass(self):
        print(">>>>>> setUpClass 测试类运行之前运行,只运行一次\n")
    
    @classmethod # 必须要 classmethod 装饰
    def tearDownClass(self):
        print(">>>>>> tearDownClass 测试类运行之后运行,只运行一次\n")
        
    #######################
    # 测试用例 skip 跳过
    #######################
    @unittest.skip("I don't want to run this case.")
    def test_skipA(self):
        pass
        
    def test_skipB(self):
        self.skipTest('Do not run this.')
    
    #######################
    # 测试用例 运行
    #######################
    def test_runA(self):
        print('> runA .............start')
        a = 3;b=3;c=4;d=[1,2];e=[1,2,3]
        x = True;y=False;n=None
        self.assertEqual(a, b)     # a == b      
        self.assertNotEqual(a, c)  # a != c 
        self.assertTrue(x)         # bool(x) is True      
        self.assertFalse(y)        # bool(y) is False      
        self.assertIsNone(n)       # n is None     
        self.assertIsNotNone(y)    # y is not None   
        self.assertIn(a, e)        # a in b    
        self.assertNotIn(a, d)     # a not in b

        print('> runA .............end')
        
    def test_runB(self):
        print('> runB .............')

    def test_error(self):
        print('> error .............')
        d = Dict(a=1)

        # 捕获异常 KeyError
        with self.assertRaises(KeyError):
            print "qweqwe"
            print d['test']
            print "qweqwe"
            print d.test

    
    
if __name__ == '__main__':
    u"""
    # 运行单元测试(存在包模块问题)
    python -m unittest tools_unittest
    # 简单直接好用(不存在包模块问题)
    nosetests -sv tools_unittest.py
    """
    unittest.main()

    # >>>>>>>>>>>>>>>>>> 运行所有test
    suite = unittest.TestLoader().loadTestsFromTestCase(TestCaseApi)
    unittest.TextTestRunner(verbosity=2).run(suite)
    
    
    # >>>>>>>>>>>>>>>>>> 指定运行test
    suite = unittest.TestSuite()
    # 指定运行的test，并指定运行顺序(不指定的话执行顺序随机)
    tests = [TestCaseApi("test_runA"), TestCaseApi("test_runB")]

    suite.addTests(tests)
    # verbosity=2 2详细报告 0简单报告 1一般报告
    runner = unittest.TextTestRunner(verbosity=2)
    # 输出信息 .执行成功 F执行失败 E执行报错 S跳过执行
    runner.run(suite)

    # >>>>>>>>>>>>>>>>>> 输出HTML报告
    from ..tools.tools_unittest_HTMLTestRunner import HTMLTestRunner
    with open('HTMLReport.html', 'w') as f:
        runner = HTMLTestRunner(stream=f,
                                title = 'MathFunc Test Report',
                                description='generated by HTMLTestRunner.',
                                verbosity=2
                                )
        runner.run(suite)

    exit()

